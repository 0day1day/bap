open Lnf

module SreedharHeader (Gr: Lnf.G) =
  struct
      module Dom = Dominator.Make(Gr.G)

      type t = Dom.sdom

      let init cfg v0 = let dom_funs = Dom.compute_all cfg v0
                        in dom_funs.Dom.sdom

      let find_headers sdom scc =
        (*
         * The set of primary loops identified by the Sreedhar et al. algorithm
         * can be shown to be the same as the loop nesting forest generated by
         * the scheme of Section 4.2 when we define H(X) to be the set of
         * vertices in X that are not strictly dominated by any vertex in X.
         *)
        let is_header x = not (List.exists (fun v -> sdom v x) scc) in
        List.filter is_header scc
  end

module Make (C: Lnf.G) = Lnf_ramalingam.Make (SreedharHeader) (C)
