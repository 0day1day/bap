open Lnf

module HavlakHeader (Gr: Lnf.G) =
  struct
      module Dfs = Graph.Traverse.Dfs(Gr.G)

      type t = Gr.G.V.t list

      let init cfg v0 = let visited = ref [] in
                        let () = Dfs.postfix_component (fun v -> visited := v::!visited) cfg v0 in
                        !visited

      let find_headers dfs_order scc =
        (*
         * The Havlak forest is the one generated by the scheme described in
         * Section 4.2 when we define H(X) to be the singleton set consisting of
         * the vertex in X that is visited first during depth first search.
         *)
        let rec find_first find_these in_here =
          match find_these with
          | [] -> raise Not_found
          | x::rest -> if List.mem x in_here then x else find_first rest in_here in
        [find_first dfs_order scc]
  end

module Make (C: Lnf.G) = Lnf_ramalingam.Make (HavlakHeader) (C)
