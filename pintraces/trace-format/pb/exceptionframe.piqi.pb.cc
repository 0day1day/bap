// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "exceptionframe.piqi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* exception_frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  exception_frame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_exceptionframe_2epiqi_2eproto() {
  protobuf_AddDesc_exceptionframe_2epiqi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "exceptionframe.piqi.proto");
  GOOGLE_CHECK(file != NULL);
  exception_frame_descriptor_ = file->message_type(0);
  static const int exception_frame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exception_frame, exception_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exception_frame, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exception_frame, from_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exception_frame, to_addr_),
  };
  exception_frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      exception_frame_descriptor_,
      exception_frame::default_instance_,
      exception_frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exception_frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exception_frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(exception_frame));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_exceptionframe_2epiqi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    exception_frame_descriptor_, &exception_frame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_exceptionframe_2epiqi_2eproto() {
  delete exception_frame::default_instance_;
  delete exception_frame_reflection_;
}

void protobuf_AddDesc_exceptionframe_2epiqi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031exceptionframe.piqi.proto\"b\n\017exception"
    "_frame\022\030\n\020exception_number\030\001 \002(\004\022\021\n\tthre"
    "ad_id\030\002 \001(\004\022\021\n\tfrom_addr\030\003 \002(\004\022\017\n\007to_add"
    "r\030\004 \002(\004", 127);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "exceptionframe.piqi.proto", &protobuf_RegisterTypes);
  exception_frame::default_instance_ = new exception_frame();
  exception_frame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_exceptionframe_2epiqi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_exceptionframe_2epiqi_2eproto {
  StaticDescriptorInitializer_exceptionframe_2epiqi_2eproto() {
    protobuf_AddDesc_exceptionframe_2epiqi_2eproto();
  }
} static_descriptor_initializer_exceptionframe_2epiqi_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int exception_frame::kExceptionNumberFieldNumber;
const int exception_frame::kThreadIdFieldNumber;
const int exception_frame::kFromAddrFieldNumber;
const int exception_frame::kToAddrFieldNumber;
#endif  // !_MSC_VER

exception_frame::exception_frame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void exception_frame::InitAsDefaultInstance() {
}

exception_frame::exception_frame(const exception_frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void exception_frame::SharedCtor() {
  _cached_size_ = 0;
  exception_number_ = GOOGLE_ULONGLONG(0);
  thread_id_ = GOOGLE_ULONGLONG(0);
  from_addr_ = GOOGLE_ULONGLONG(0);
  to_addr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

exception_frame::~exception_frame() {
  SharedDtor();
}

void exception_frame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void exception_frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exception_frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return exception_frame_descriptor_;
}

const exception_frame& exception_frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exceptionframe_2epiqi_2eproto();  return *default_instance_;
}

exception_frame* exception_frame::default_instance_ = NULL;

exception_frame* exception_frame::New() const {
  return new exception_frame;
}

void exception_frame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exception_number_ = GOOGLE_ULONGLONG(0);
    thread_id_ = GOOGLE_ULONGLONG(0);
    from_addr_ = GOOGLE_ULONGLONG(0);
    to_addr_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool exception_frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 exception_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exception_number_)));
          set_has_exception_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thread_id;
        break;
      }
      
      // optional uint64 thread_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_addr;
        break;
      }
      
      // required uint64 from_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_addr_)));
          set_has_from_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_to_addr;
        break;
      }
      
      // required uint64 to_addr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_addr_)));
          set_has_to_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void exception_frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 exception_number = 1;
  if (has_exception_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->exception_number(), output);
  }
  
  // optional uint64 thread_id = 2;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->thread_id(), output);
  }
  
  // required uint64 from_addr = 3;
  if (has_from_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->from_addr(), output);
  }
  
  // required uint64 to_addr = 4;
  if (has_to_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->to_addr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* exception_frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 exception_number = 1;
  if (has_exception_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->exception_number(), target);
  }
  
  // optional uint64 thread_id = 2;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->thread_id(), target);
  }
  
  // required uint64 from_addr = 3;
  if (has_from_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->from_addr(), target);
  }
  
  // required uint64 to_addr = 4;
  if (has_to_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->to_addr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int exception_frame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 exception_number = 1;
    if (has_exception_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exception_number());
    }
    
    // optional uint64 thread_id = 2;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->thread_id());
    }
    
    // required uint64 from_addr = 3;
    if (has_from_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_addr());
    }
    
    // required uint64 to_addr = 4;
    if (has_to_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_addr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exception_frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const exception_frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const exception_frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void exception_frame::MergeFrom(const exception_frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exception_number()) {
      set_exception_number(from.exception_number());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_from_addr()) {
      set_from_addr(from.from_addr());
    }
    if (from.has_to_addr()) {
      set_to_addr(from.to_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void exception_frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exception_frame::CopyFrom(const exception_frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exception_frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void exception_frame::Swap(exception_frame* other) {
  if (other != this) {
    std::swap(exception_number_, other->exception_number_);
    std::swap(thread_id_, other->thread_id_);
    std::swap(from_addr_, other->from_addr_);
    std::swap(to_addr_, other->to_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata exception_frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = exception_frame_descriptor_;
  metadata.reflection = exception_frame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
