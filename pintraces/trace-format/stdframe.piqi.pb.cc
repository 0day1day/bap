// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stdframe.piqi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* std_frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  std_frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* operand_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operand_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* operand_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operand_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* reg_operand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reg_operand_reflection_ = NULL;
const ::google::protobuf::Descriptor* mem_operand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mem_operand_reflection_ = NULL;
const ::google::protobuf::Descriptor* operand_usage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operand_usage_reflection_ = NULL;
const ::google::protobuf::Descriptor* taint_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  taint_info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_stdframe_2epiqi_2eproto() {
  protobuf_AddDesc_stdframe_2epiqi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stdframe.piqi.proto");
  GOOGLE_CHECK(file != NULL);
  std_frame_descriptor_ = file->message_type(0);
  static const int std_frame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(std_frame, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(std_frame, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(std_frame, rawbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(std_frame, operand_list_),
  };
  std_frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      std_frame_descriptor_,
      std_frame::default_instance_,
      std_frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(std_frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(std_frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(std_frame));
  operand_list_descriptor_ = file->message_type(1);
  static const int operand_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_list, elem_),
  };
  operand_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operand_list_descriptor_,
      operand_list::default_instance_,
      operand_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operand_list));
  operand_info_descriptor_ = file->message_type(2);
  static const int operand_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_info, mem_operand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_info, reg_operand_),
  };
  operand_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operand_info_descriptor_,
      operand_info::default_instance_,
      operand_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operand_info));
  reg_operand_descriptor_ = file->message_type(3);
  static const int reg_operand_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_operand, bit_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_operand, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_operand, operand_usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_operand, taint_info_),
  };
  reg_operand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reg_operand_descriptor_,
      reg_operand::default_instance_,
      reg_operand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_operand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_operand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reg_operand));
  mem_operand_descriptor_ = file->message_type(4);
  static const int mem_operand_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mem_operand, bit_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mem_operand, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mem_operand, operand_usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mem_operand, taint_info_),
  };
  mem_operand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mem_operand_descriptor_,
      mem_operand::default_instance_,
      mem_operand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mem_operand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mem_operand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mem_operand));
  operand_usage_descriptor_ = file->message_type(5);
  static const int operand_usage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_usage, read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_usage, written_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_usage, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_usage, base_),
  };
  operand_usage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operand_usage_descriptor_,
      operand_usage::default_instance_,
      operand_usage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_usage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_usage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operand_usage));
  taint_info_descriptor_ = file->message_type(6);
  static const int taint_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_info, no_taint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_info, taint_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_info, taint_multiple_),
  };
  taint_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      taint_info_descriptor_,
      taint_info::default_instance_,
      taint_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(taint_info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stdframe_2epiqi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    std_frame_descriptor_, &std_frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operand_list_descriptor_, &operand_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operand_info_descriptor_, &operand_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reg_operand_descriptor_, &reg_operand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mem_operand_descriptor_, &mem_operand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operand_usage_descriptor_, &operand_usage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    taint_info_descriptor_, &taint_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stdframe_2epiqi_2eproto() {
  delete std_frame::default_instance_;
  delete std_frame_reflection_;
  delete operand_list::default_instance_;
  delete operand_list_reflection_;
  delete operand_info::default_instance_;
  delete operand_info_reflection_;
  delete reg_operand::default_instance_;
  delete reg_operand_reflection_;
  delete mem_operand::default_instance_;
  delete mem_operand_reflection_;
  delete operand_usage::default_instance_;
  delete operand_usage_reflection_;
  delete taint_info::default_instance_;
  delete taint_info_reflection_;
}

void protobuf_AddDesc_stdframe_2epiqi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023stdframe.piqi.proto\"f\n\tstd_frame\022\017\n\007ad"
    "dress\030\001 \002(\004\022\021\n\tthread_id\030\002 \002(\004\022\020\n\010rawbyt"
    "es\030\003 \002(\014\022#\n\014operand_list\030\004 \002(\0132\r.operand"
    "_list\"+\n\014operand_list\022\033\n\004elem\030\001 \003(\0132\r.op"
    "erand_info\"T\n\014operand_info\022!\n\013mem_operan"
    "d\030\001 \001(\0132\014.mem_operand\022!\n\013reg_operand\030\002 \001"
    "(\0132\014.reg_operand\"w\n\013reg_operand\022\022\n\nbit_l"
    "ength\030\001 \002(\021\022\014\n\004name\030\002 \002(\t\022%\n\roperand_usa"
    "ge\030\003 \002(\0132\016.operand_usage\022\037\n\ntaint_info\030\004"
    " \002(\0132\013.taint_info\"z\n\013mem_operand\022\022\n\nbit_"
    "length\030\001 \002(\021\022\017\n\007address\030\002 \002(\004\022%\n\roperand"
    "_usage\030\003 \002(\0132\016.operand_usage\022\037\n\ntaint_in"
    "fo\030\004 \002(\0132\013.taint_info\"K\n\roperand_usage\022\014"
    "\n\004read\030\001 \002(\010\022\017\n\007written\030\002 \002(\010\022\r\n\005index\030\003"
    " \002(\010\022\014\n\004base\030\004 \002(\010\"H\n\ntaint_info\022\020\n\010no_t"
    "aint\030\001 \001(\010\022\020\n\010taint_id\030\002 \001(\004\022\026\n\016taint_mu"
    "ltiple\030\003 \001(\010", 652);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stdframe.piqi.proto", &protobuf_RegisterTypes);
  std_frame::default_instance_ = new std_frame();
  operand_list::default_instance_ = new operand_list();
  operand_info::default_instance_ = new operand_info();
  reg_operand::default_instance_ = new reg_operand();
  mem_operand::default_instance_ = new mem_operand();
  operand_usage::default_instance_ = new operand_usage();
  taint_info::default_instance_ = new taint_info();
  std_frame::default_instance_->InitAsDefaultInstance();
  operand_list::default_instance_->InitAsDefaultInstance();
  operand_info::default_instance_->InitAsDefaultInstance();
  reg_operand::default_instance_->InitAsDefaultInstance();
  mem_operand::default_instance_->InitAsDefaultInstance();
  operand_usage::default_instance_->InitAsDefaultInstance();
  taint_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stdframe_2epiqi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stdframe_2epiqi_2eproto {
  StaticDescriptorInitializer_stdframe_2epiqi_2eproto() {
    protobuf_AddDesc_stdframe_2epiqi_2eproto();
  }
} static_descriptor_initializer_stdframe_2epiqi_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int std_frame::kAddressFieldNumber;
const int std_frame::kThreadIdFieldNumber;
const int std_frame::kRawbytesFieldNumber;
const int std_frame::kOperandListFieldNumber;
#endif  // !_MSC_VER

std_frame::std_frame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void std_frame::InitAsDefaultInstance() {
  operand_list_ = const_cast< ::operand_list*>(&::operand_list::default_instance());
}

std_frame::std_frame(const std_frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void std_frame::SharedCtor() {
  _cached_size_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  thread_id_ = GOOGLE_ULONGLONG(0);
  rawbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operand_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

std_frame::~std_frame() {
  SharedDtor();
}

void std_frame::SharedDtor() {
  if (rawbytes_ != &::google::protobuf::internal::kEmptyString) {
    delete rawbytes_;
  }
  if (this != default_instance_) {
    delete operand_list_;
  }
}

void std_frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* std_frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return std_frame_descriptor_;
}

const std_frame& std_frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stdframe_2epiqi_2eproto();  return *default_instance_;
}

std_frame* std_frame::default_instance_ = NULL;

std_frame* std_frame::New() const {
  return new std_frame;
}

void std_frame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    address_ = GOOGLE_ULONGLONG(0);
    thread_id_ = GOOGLE_ULONGLONG(0);
    if (has_rawbytes()) {
      if (rawbytes_ != &::google::protobuf::internal::kEmptyString) {
        rawbytes_->clear();
      }
    }
    if (has_operand_list()) {
      if (operand_list_ != NULL) operand_list_->::operand_list::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool std_frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thread_id;
        break;
      }
      
      // required uint64 thread_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rawbytes;
        break;
      }
      
      // required bytes rawbytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rawbytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rawbytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_operand_list;
        break;
      }
      
      // required .operand_list operand_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operand_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void std_frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->address(), output);
  }
  
  // required uint64 thread_id = 2;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->thread_id(), output);
  }
  
  // required bytes rawbytes = 3;
  if (has_rawbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->rawbytes(), output);
  }
  
  // required .operand_list operand_list = 4;
  if (has_operand_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->operand_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* std_frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 address = 1;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->address(), target);
  }
  
  // required uint64 thread_id = 2;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->thread_id(), target);
  }
  
  // required bytes rawbytes = 3;
  if (has_rawbytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->rawbytes(), target);
  }
  
  // required .operand_list operand_list = 4;
  if (has_operand_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->operand_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int std_frame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->address());
    }
    
    // required uint64 thread_id = 2;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->thread_id());
    }
    
    // required bytes rawbytes = 3;
    if (has_rawbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rawbytes());
    }
    
    // required .operand_list operand_list = 4;
    if (has_operand_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operand_list());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void std_frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const std_frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const std_frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void std_frame::MergeFrom(const std_frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_rawbytes()) {
      set_rawbytes(from.rawbytes());
    }
    if (from.has_operand_list()) {
      mutable_operand_list()->::operand_list::MergeFrom(from.operand_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void std_frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void std_frame::CopyFrom(const std_frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool std_frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_operand_list()) {
    if (!this->operand_list().IsInitialized()) return false;
  }
  return true;
}

void std_frame::Swap(std_frame* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(thread_id_, other->thread_id_);
    std::swap(rawbytes_, other->rawbytes_);
    std::swap(operand_list_, other->operand_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata std_frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = std_frame_descriptor_;
  metadata.reflection = std_frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operand_list::kElemFieldNumber;
#endif  // !_MSC_VER

operand_list::operand_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operand_list::InitAsDefaultInstance() {
}

operand_list::operand_list(const operand_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operand_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operand_list::~operand_list() {
  SharedDtor();
}

void operand_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void operand_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operand_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operand_list_descriptor_;
}

const operand_list& operand_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stdframe_2epiqi_2eproto();  return *default_instance_;
}

operand_list* operand_list::default_instance_ = NULL;

operand_list* operand_list::New() const {
  return new operand_list;
}

void operand_list::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operand_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .operand_info elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operand_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .operand_info elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operand_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .operand_info elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operand_list::ByteSize() const {
  int total_size = 0;
  
  // repeated .operand_info elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operand_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operand_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operand_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operand_list::MergeFrom(const operand_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operand_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operand_list::CopyFrom(const operand_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operand_list::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void operand_list::Swap(operand_list* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operand_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operand_list_descriptor_;
  metadata.reflection = operand_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operand_info::kMemOperandFieldNumber;
const int operand_info::kRegOperandFieldNumber;
#endif  // !_MSC_VER

operand_info::operand_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operand_info::InitAsDefaultInstance() {
  mem_operand_ = const_cast< ::mem_operand*>(&::mem_operand::default_instance());
  reg_operand_ = const_cast< ::reg_operand*>(&::reg_operand::default_instance());
}

operand_info::operand_info(const operand_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operand_info::SharedCtor() {
  _cached_size_ = 0;
  mem_operand_ = NULL;
  reg_operand_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operand_info::~operand_info() {
  SharedDtor();
}

void operand_info::SharedDtor() {
  if (this != default_instance_) {
    delete mem_operand_;
    delete reg_operand_;
  }
}

void operand_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operand_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operand_info_descriptor_;
}

const operand_info& operand_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stdframe_2epiqi_2eproto();  return *default_instance_;
}

operand_info* operand_info::default_instance_ = NULL;

operand_info* operand_info::New() const {
  return new operand_info;
}

void operand_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mem_operand()) {
      if (mem_operand_ != NULL) mem_operand_->::mem_operand::Clear();
    }
    if (has_reg_operand()) {
      if (reg_operand_ != NULL) reg_operand_->::reg_operand::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operand_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mem_operand mem_operand = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mem_operand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reg_operand;
        break;
      }
      
      // optional .reg_operand reg_operand = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reg_operand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reg_operand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operand_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mem_operand mem_operand = 1;
  if (has_mem_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mem_operand(), output);
  }
  
  // optional .reg_operand reg_operand = 2;
  if (has_reg_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reg_operand(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operand_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mem_operand mem_operand = 1;
  if (has_mem_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mem_operand(), target);
  }
  
  // optional .reg_operand reg_operand = 2;
  if (has_reg_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reg_operand(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operand_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mem_operand mem_operand = 1;
    if (has_mem_operand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mem_operand());
    }
    
    // optional .reg_operand reg_operand = 2;
    if (has_reg_operand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reg_operand());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operand_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operand_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operand_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operand_info::MergeFrom(const operand_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mem_operand()) {
      mutable_mem_operand()->::mem_operand::MergeFrom(from.mem_operand());
    }
    if (from.has_reg_operand()) {
      mutable_reg_operand()->::reg_operand::MergeFrom(from.reg_operand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operand_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operand_info::CopyFrom(const operand_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operand_info::IsInitialized() const {
  
  if (has_mem_operand()) {
    if (!this->mem_operand().IsInitialized()) return false;
  }
  if (has_reg_operand()) {
    if (!this->reg_operand().IsInitialized()) return false;
  }
  return true;
}

void operand_info::Swap(operand_info* other) {
  if (other != this) {
    std::swap(mem_operand_, other->mem_operand_);
    std::swap(reg_operand_, other->reg_operand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operand_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operand_info_descriptor_;
  metadata.reflection = operand_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reg_operand::kBitLengthFieldNumber;
const int reg_operand::kNameFieldNumber;
const int reg_operand::kOperandUsageFieldNumber;
const int reg_operand::kTaintInfoFieldNumber;
#endif  // !_MSC_VER

reg_operand::reg_operand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void reg_operand::InitAsDefaultInstance() {
  operand_usage_ = const_cast< ::operand_usage*>(&::operand_usage::default_instance());
  taint_info_ = const_cast< ::taint_info*>(&::taint_info::default_instance());
}

reg_operand::reg_operand(const reg_operand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void reg_operand::SharedCtor() {
  _cached_size_ = 0;
  bit_length_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operand_usage_ = NULL;
  taint_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reg_operand::~reg_operand() {
  SharedDtor();
}

void reg_operand::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete operand_usage_;
    delete taint_info_;
  }
}

void reg_operand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reg_operand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reg_operand_descriptor_;
}

const reg_operand& reg_operand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stdframe_2epiqi_2eproto();  return *default_instance_;
}

reg_operand* reg_operand::default_instance_ = NULL;

reg_operand* reg_operand::New() const {
  return new reg_operand;
}

void reg_operand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bit_length_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_operand_usage()) {
      if (operand_usage_ != NULL) operand_usage_->::operand_usage::Clear();
    }
    if (has_taint_info()) {
      if (taint_info_ != NULL) taint_info_->::taint_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reg_operand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 bit_length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bit_length_)));
          set_has_bit_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_operand_usage;
        break;
      }
      
      // required .operand_usage operand_usage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operand_usage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand_usage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_taint_info;
        break;
      }
      
      // required .taint_info taint_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taint_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taint_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void reg_operand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 bit_length = 1;
  if (has_bit_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->bit_length(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required .operand_usage operand_usage = 3;
  if (has_operand_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->operand_usage(), output);
  }
  
  // required .taint_info taint_info = 4;
  if (has_taint_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->taint_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* reg_operand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 bit_length = 1;
  if (has_bit_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->bit_length(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required .operand_usage operand_usage = 3;
  if (has_operand_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->operand_usage(), target);
  }
  
  // required .taint_info taint_info = 4;
  if (has_taint_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->taint_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int reg_operand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 bit_length = 1;
    if (has_bit_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bit_length());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required .operand_usage operand_usage = 3;
    if (has_operand_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operand_usage());
    }
    
    // required .taint_info taint_info = 4;
    if (has_taint_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taint_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reg_operand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reg_operand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reg_operand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reg_operand::MergeFrom(const reg_operand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bit_length()) {
      set_bit_length(from.bit_length());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_operand_usage()) {
      mutable_operand_usage()->::operand_usage::MergeFrom(from.operand_usage());
    }
    if (from.has_taint_info()) {
      mutable_taint_info()->::taint_info::MergeFrom(from.taint_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reg_operand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reg_operand::CopyFrom(const reg_operand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reg_operand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_operand_usage()) {
    if (!this->operand_usage().IsInitialized()) return false;
  }
  return true;
}

void reg_operand::Swap(reg_operand* other) {
  if (other != this) {
    std::swap(bit_length_, other->bit_length_);
    std::swap(name_, other->name_);
    std::swap(operand_usage_, other->operand_usage_);
    std::swap(taint_info_, other->taint_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reg_operand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reg_operand_descriptor_;
  metadata.reflection = reg_operand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mem_operand::kBitLengthFieldNumber;
const int mem_operand::kAddressFieldNumber;
const int mem_operand::kOperandUsageFieldNumber;
const int mem_operand::kTaintInfoFieldNumber;
#endif  // !_MSC_VER

mem_operand::mem_operand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mem_operand::InitAsDefaultInstance() {
  operand_usage_ = const_cast< ::operand_usage*>(&::operand_usage::default_instance());
  taint_info_ = const_cast< ::taint_info*>(&::taint_info::default_instance());
}

mem_operand::mem_operand(const mem_operand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mem_operand::SharedCtor() {
  _cached_size_ = 0;
  bit_length_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  operand_usage_ = NULL;
  taint_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mem_operand::~mem_operand() {
  SharedDtor();
}

void mem_operand::SharedDtor() {
  if (this != default_instance_) {
    delete operand_usage_;
    delete taint_info_;
  }
}

void mem_operand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mem_operand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mem_operand_descriptor_;
}

const mem_operand& mem_operand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stdframe_2epiqi_2eproto();  return *default_instance_;
}

mem_operand* mem_operand::default_instance_ = NULL;

mem_operand* mem_operand::New() const {
  return new mem_operand;
}

void mem_operand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bit_length_ = 0;
    address_ = GOOGLE_ULONGLONG(0);
    if (has_operand_usage()) {
      if (operand_usage_ != NULL) operand_usage_->::operand_usage::Clear();
    }
    if (has_taint_info()) {
      if (taint_info_ != NULL) taint_info_->::taint_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mem_operand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 bit_length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bit_length_)));
          set_has_bit_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_address;
        break;
      }
      
      // required uint64 address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_operand_usage;
        break;
      }
      
      // required .operand_usage operand_usage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operand_usage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand_usage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_taint_info;
        break;
      }
      
      // required .taint_info taint_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taint_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taint_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mem_operand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 bit_length = 1;
  if (has_bit_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->bit_length(), output);
  }
  
  // required uint64 address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->address(), output);
  }
  
  // required .operand_usage operand_usage = 3;
  if (has_operand_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->operand_usage(), output);
  }
  
  // required .taint_info taint_info = 4;
  if (has_taint_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->taint_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mem_operand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 bit_length = 1;
  if (has_bit_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->bit_length(), target);
  }
  
  // required uint64 address = 2;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->address(), target);
  }
  
  // required .operand_usage operand_usage = 3;
  if (has_operand_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->operand_usage(), target);
  }
  
  // required .taint_info taint_info = 4;
  if (has_taint_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->taint_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mem_operand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 bit_length = 1;
    if (has_bit_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bit_length());
    }
    
    // required uint64 address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->address());
    }
    
    // required .operand_usage operand_usage = 3;
    if (has_operand_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operand_usage());
    }
    
    // required .taint_info taint_info = 4;
    if (has_taint_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taint_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mem_operand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mem_operand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mem_operand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mem_operand::MergeFrom(const mem_operand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bit_length()) {
      set_bit_length(from.bit_length());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_operand_usage()) {
      mutable_operand_usage()->::operand_usage::MergeFrom(from.operand_usage());
    }
    if (from.has_taint_info()) {
      mutable_taint_info()->::taint_info::MergeFrom(from.taint_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mem_operand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mem_operand::CopyFrom(const mem_operand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mem_operand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_operand_usage()) {
    if (!this->operand_usage().IsInitialized()) return false;
  }
  return true;
}

void mem_operand::Swap(mem_operand* other) {
  if (other != this) {
    std::swap(bit_length_, other->bit_length_);
    std::swap(address_, other->address_);
    std::swap(operand_usage_, other->operand_usage_);
    std::swap(taint_info_, other->taint_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mem_operand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mem_operand_descriptor_;
  metadata.reflection = mem_operand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operand_usage::kReadFieldNumber;
const int operand_usage::kWrittenFieldNumber;
const int operand_usage::kIndexFieldNumber;
const int operand_usage::kBaseFieldNumber;
#endif  // !_MSC_VER

operand_usage::operand_usage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operand_usage::InitAsDefaultInstance() {
}

operand_usage::operand_usage(const operand_usage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operand_usage::SharedCtor() {
  _cached_size_ = 0;
  read_ = false;
  written_ = false;
  index_ = false;
  base_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operand_usage::~operand_usage() {
  SharedDtor();
}

void operand_usage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void operand_usage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operand_usage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operand_usage_descriptor_;
}

const operand_usage& operand_usage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stdframe_2epiqi_2eproto();  return *default_instance_;
}

operand_usage* operand_usage::default_instance_ = NULL;

operand_usage* operand_usage::New() const {
  return new operand_usage;
}

void operand_usage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    read_ = false;
    written_ = false;
    index_ = false;
    base_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operand_usage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool read = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_)));
          set_has_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_written;
        break;
      }
      
      // required bool written = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_written:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &written_)));
          set_has_written();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // required bool index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_base;
        break;
      }
      
      // required bool base = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operand_usage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool read = 1;
  if (has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->read(), output);
  }
  
  // required bool written = 2;
  if (has_written()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->written(), output);
  }
  
  // required bool index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->index(), output);
  }
  
  // required bool base = 4;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->base(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operand_usage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool read = 1;
  if (has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->read(), target);
  }
  
  // required bool written = 2;
  if (has_written()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->written(), target);
  }
  
  // required bool index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->index(), target);
  }
  
  // required bool base = 4;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->base(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operand_usage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool read = 1;
    if (has_read()) {
      total_size += 1 + 1;
    }
    
    // required bool written = 2;
    if (has_written()) {
      total_size += 1 + 1;
    }
    
    // required bool index = 3;
    if (has_index()) {
      total_size += 1 + 1;
    }
    
    // required bool base = 4;
    if (has_base()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operand_usage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operand_usage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operand_usage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operand_usage::MergeFrom(const operand_usage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_read()) {
      set_read(from.read());
    }
    if (from.has_written()) {
      set_written(from.written());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_base()) {
      set_base(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operand_usage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operand_usage::CopyFrom(const operand_usage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operand_usage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void operand_usage::Swap(operand_usage* other) {
  if (other != this) {
    std::swap(read_, other->read_);
    std::swap(written_, other->written_);
    std::swap(index_, other->index_);
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operand_usage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operand_usage_descriptor_;
  metadata.reflection = operand_usage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int taint_info::kNoTaintFieldNumber;
const int taint_info::kTaintIdFieldNumber;
const int taint_info::kTaintMultipleFieldNumber;
#endif  // !_MSC_VER

taint_info::taint_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void taint_info::InitAsDefaultInstance() {
}

taint_info::taint_info(const taint_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void taint_info::SharedCtor() {
  _cached_size_ = 0;
  no_taint_ = false;
  taint_id_ = GOOGLE_ULONGLONG(0);
  taint_multiple_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

taint_info::~taint_info() {
  SharedDtor();
}

void taint_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void taint_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taint_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return taint_info_descriptor_;
}

const taint_info& taint_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stdframe_2epiqi_2eproto();  return *default_instance_;
}

taint_info* taint_info::default_instance_ = NULL;

taint_info* taint_info::New() const {
  return new taint_info;
}

void taint_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    no_taint_ = false;
    taint_id_ = GOOGLE_ULONGLONG(0);
    taint_multiple_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool taint_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool no_taint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_taint_)));
          set_has_no_taint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_taint_id;
        break;
      }
      
      // optional uint64 taint_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taint_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &taint_id_)));
          set_has_taint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_taint_multiple;
        break;
      }
      
      // optional bool taint_multiple = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taint_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &taint_multiple_)));
          set_has_taint_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void taint_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool no_taint = 1;
  if (has_no_taint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->no_taint(), output);
  }
  
  // optional uint64 taint_id = 2;
  if (has_taint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->taint_id(), output);
  }
  
  // optional bool taint_multiple = 3;
  if (has_taint_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->taint_multiple(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* taint_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool no_taint = 1;
  if (has_no_taint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->no_taint(), target);
  }
  
  // optional uint64 taint_id = 2;
  if (has_taint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->taint_id(), target);
  }
  
  // optional bool taint_multiple = 3;
  if (has_taint_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->taint_multiple(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int taint_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool no_taint = 1;
    if (has_no_taint()) {
      total_size += 1 + 1;
    }
    
    // optional uint64 taint_id = 2;
    if (has_taint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->taint_id());
    }
    
    // optional bool taint_multiple = 3;
    if (has_taint_multiple()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taint_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const taint_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const taint_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void taint_info::MergeFrom(const taint_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_no_taint()) {
      set_no_taint(from.no_taint());
    }
    if (from.has_taint_id()) {
      set_taint_id(from.taint_id());
    }
    if (from.has_taint_multiple()) {
      set_taint_multiple(from.taint_multiple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void taint_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taint_info::CopyFrom(const taint_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taint_info::IsInitialized() const {
  
  return true;
}

void taint_info::Swap(taint_info* other) {
  if (other != this) {
    std::swap(no_taint_, other->no_taint_);
    std::swap(taint_id_, other->taint_id_);
    std::swap(taint_multiple_, other->taint_multiple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata taint_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = taint_info_descriptor_;
  metadata.reflection = taint_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
