// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "syscallframe.piqi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* syscall_frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  syscall_frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* argument_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  argument_list_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_syscallframe_2epiqi_2eproto() {
  protobuf_AddDesc_syscallframe_2epiqi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "syscallframe.piqi.proto");
  GOOGLE_CHECK(file != NULL);
  syscall_frame_descriptor_ = file->message_type(0);
  static const int syscall_frame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_frame, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_frame, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_frame, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_frame, argument_list_),
  };
  syscall_frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      syscall_frame_descriptor_,
      syscall_frame::default_instance_,
      syscall_frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(syscall_frame));
  argument_list_descriptor_ = file->message_type(1);
  static const int argument_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(argument_list, elem_),
  };
  argument_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      argument_list_descriptor_,
      argument_list::default_instance_,
      argument_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(argument_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(argument_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(argument_list));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_syscallframe_2epiqi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    syscall_frame_descriptor_, &syscall_frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    argument_list_descriptor_, &argument_list::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_syscallframe_2epiqi_2eproto() {
  delete syscall_frame::default_instance_;
  delete syscall_frame_reflection_;
  delete argument_list::default_instance_;
  delete argument_list_reflection_;
}

void protobuf_AddDesc_syscallframe_2epiqi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027syscallframe.piqi.proto\"j\n\rsyscall_fra"
    "me\022\017\n\007address\030\001 \002(\004\022\021\n\tthread_id\030\002 \002(\004\022\016"
    "\n\006number\030\003 \002(\004\022%\n\rargument_list\030\004 \002(\0132\016."
    "argument_list\"\035\n\rargument_list\022\014\n\004elem\030\001"
    " \003(\022", 164);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "syscallframe.piqi.proto", &protobuf_RegisterTypes);
  syscall_frame::default_instance_ = new syscall_frame();
  argument_list::default_instance_ = new argument_list();
  syscall_frame::default_instance_->InitAsDefaultInstance();
  argument_list::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_syscallframe_2epiqi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_syscallframe_2epiqi_2eproto {
  StaticDescriptorInitializer_syscallframe_2epiqi_2eproto() {
    protobuf_AddDesc_syscallframe_2epiqi_2eproto();
  }
} static_descriptor_initializer_syscallframe_2epiqi_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int syscall_frame::kAddressFieldNumber;
const int syscall_frame::kThreadIdFieldNumber;
const int syscall_frame::kNumberFieldNumber;
const int syscall_frame::kArgumentListFieldNumber;
#endif  // !_MSC_VER

syscall_frame::syscall_frame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void syscall_frame::InitAsDefaultInstance() {
  argument_list_ = const_cast< ::argument_list*>(&::argument_list::default_instance());
}

syscall_frame::syscall_frame(const syscall_frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void syscall_frame::SharedCtor() {
  _cached_size_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  thread_id_ = GOOGLE_ULONGLONG(0);
  number_ = GOOGLE_ULONGLONG(0);
  argument_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

syscall_frame::~syscall_frame() {
  SharedDtor();
}

void syscall_frame::SharedDtor() {
  if (this != default_instance_) {
    delete argument_list_;
  }
}

void syscall_frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* syscall_frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return syscall_frame_descriptor_;
}

const syscall_frame& syscall_frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_syscallframe_2epiqi_2eproto();  return *default_instance_;
}

syscall_frame* syscall_frame::default_instance_ = NULL;

syscall_frame* syscall_frame::New() const {
  return new syscall_frame;
}

void syscall_frame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    address_ = GOOGLE_ULONGLONG(0);
    thread_id_ = GOOGLE_ULONGLONG(0);
    number_ = GOOGLE_ULONGLONG(0);
    if (has_argument_list()) {
      if (argument_list_ != NULL) argument_list_->::argument_list::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool syscall_frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thread_id;
        break;
      }
      
      // required uint64 thread_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }
      
      // required uint64 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_argument_list;
        break;
      }
      
      // required .argument_list argument_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argument_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argument_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void syscall_frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->address(), output);
  }
  
  // required uint64 thread_id = 2;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->thread_id(), output);
  }
  
  // required uint64 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->number(), output);
  }
  
  // required .argument_list argument_list = 4;
  if (has_argument_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->argument_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* syscall_frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 address = 1;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->address(), target);
  }
  
  // required uint64 thread_id = 2;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->thread_id(), target);
  }
  
  // required uint64 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->number(), target);
  }
  
  // required .argument_list argument_list = 4;
  if (has_argument_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->argument_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int syscall_frame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->address());
    }
    
    // required uint64 thread_id = 2;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->thread_id());
    }
    
    // required uint64 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->number());
    }
    
    // required .argument_list argument_list = 4;
    if (has_argument_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->argument_list());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void syscall_frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const syscall_frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const syscall_frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void syscall_frame::MergeFrom(const syscall_frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_argument_list()) {
      mutable_argument_list()->::argument_list::MergeFrom(from.argument_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void syscall_frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void syscall_frame::CopyFrom(const syscall_frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool syscall_frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void syscall_frame::Swap(syscall_frame* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(thread_id_, other->thread_id_);
    std::swap(number_, other->number_);
    std::swap(argument_list_, other->argument_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata syscall_frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = syscall_frame_descriptor_;
  metadata.reflection = syscall_frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int argument_list::kElemFieldNumber;
#endif  // !_MSC_VER

argument_list::argument_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void argument_list::InitAsDefaultInstance() {
}

argument_list::argument_list(const argument_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void argument_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

argument_list::~argument_list() {
  SharedDtor();
}

void argument_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void argument_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* argument_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return argument_list_descriptor_;
}

const argument_list& argument_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_syscallframe_2epiqi_2eproto();  return *default_instance_;
}

argument_list* argument_list::default_instance_ = NULL;

argument_list* argument_list::New() const {
  return new argument_list;
}

void argument_list::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool argument_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 8, input, this->mutable_elem())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_elem())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void argument_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint64 elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* argument_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint64 elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int argument_list::ByteSize() const {
  int total_size = 0;
  
  // repeated sint64 elem = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->elem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->elem(i));
    }
    total_size += 1 * this->elem_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void argument_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const argument_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const argument_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void argument_list::MergeFrom(const argument_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void argument_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void argument_list::CopyFrom(const argument_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool argument_list::IsInitialized() const {
  
  return true;
}

void argument_list::Swap(argument_list* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata argument_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = argument_list_descriptor_;
  metadata.reflection = argument_list_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
