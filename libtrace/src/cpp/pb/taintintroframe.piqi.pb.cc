// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "taintintroframe.piqi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* taint_intro_frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  taint_intro_frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* taint_intro_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  taint_intro_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* taint_intro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  taint_intro_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_taintintroframe_2epiqi_2eproto() {
  protobuf_AddDesc_taintintroframe_2epiqi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "taintintroframe.piqi.proto");
  GOOGLE_CHECK(file != NULL);
  taint_intro_frame_descriptor_ = file->message_type(0);
  static const int taint_intro_frame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro_frame, taint_intro_list_),
  };
  taint_intro_frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      taint_intro_frame_descriptor_,
      taint_intro_frame::default_instance_,
      taint_intro_frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro_frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro_frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(taint_intro_frame));
  taint_intro_list_descriptor_ = file->message_type(1);
  static const int taint_intro_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro_list, elem_),
  };
  taint_intro_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      taint_intro_list_descriptor_,
      taint_intro_list::default_instance_,
      taint_intro_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(taint_intro_list));
  taint_intro_descriptor_ = file->message_type(2);
  static const int taint_intro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro, taint_id_),
  };
  taint_intro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      taint_intro_descriptor_,
      taint_intro::default_instance_,
      taint_intro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(taint_intro));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_taintintroframe_2epiqi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    taint_intro_frame_descriptor_, &taint_intro_frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    taint_intro_list_descriptor_, &taint_intro_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    taint_intro_descriptor_, &taint_intro::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_taintintroframe_2epiqi_2eproto() {
  delete taint_intro_frame::default_instance_;
  delete taint_intro_frame_reflection_;
  delete taint_intro_list::default_instance_;
  delete taint_intro_list_reflection_;
  delete taint_intro::default_instance_;
  delete taint_intro_reflection_;
}

void protobuf_AddDesc_taintintroframe_2epiqi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032taintintroframe.piqi.proto\"@\n\021taint_in"
    "tro_frame\022+\n\020taint_intro_list\030\001 \002(\0132\021.ta"
    "int_intro_list\".\n\020taint_intro_list\022\032\n\004el"
    "em\030\001 \003(\0132\014.taint_intro\"-\n\013taint_intro\022\014\n"
    "\004addr\030\001 \002(\004\022\020\n\010taint_id\030\002 \002(\004", 189);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "taintintroframe.piqi.proto", &protobuf_RegisterTypes);
  taint_intro_frame::default_instance_ = new taint_intro_frame();
  taint_intro_list::default_instance_ = new taint_intro_list();
  taint_intro::default_instance_ = new taint_intro();
  taint_intro_frame::default_instance_->InitAsDefaultInstance();
  taint_intro_list::default_instance_->InitAsDefaultInstance();
  taint_intro::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_taintintroframe_2epiqi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_taintintroframe_2epiqi_2eproto {
  StaticDescriptorInitializer_taintintroframe_2epiqi_2eproto() {
    protobuf_AddDesc_taintintroframe_2epiqi_2eproto();
  }
} static_descriptor_initializer_taintintroframe_2epiqi_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int taint_intro_frame::kTaintIntroListFieldNumber;
#endif  // !_MSC_VER

taint_intro_frame::taint_intro_frame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void taint_intro_frame::InitAsDefaultInstance() {
  taint_intro_list_ = const_cast< ::taint_intro_list*>(&::taint_intro_list::default_instance());
}

taint_intro_frame::taint_intro_frame(const taint_intro_frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void taint_intro_frame::SharedCtor() {
  _cached_size_ = 0;
  taint_intro_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

taint_intro_frame::~taint_intro_frame() {
  SharedDtor();
}

void taint_intro_frame::SharedDtor() {
  if (this != default_instance_) {
    delete taint_intro_list_;
  }
}

void taint_intro_frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taint_intro_frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return taint_intro_frame_descriptor_;
}

const taint_intro_frame& taint_intro_frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taintintroframe_2epiqi_2eproto();  return *default_instance_;
}

taint_intro_frame* taint_intro_frame::default_instance_ = NULL;

taint_intro_frame* taint_intro_frame::New() const {
  return new taint_intro_frame;
}

void taint_intro_frame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taint_intro_list()) {
      if (taint_intro_list_ != NULL) taint_intro_list_->::taint_intro_list::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool taint_intro_frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .taint_intro_list taint_intro_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taint_intro_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void taint_intro_frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .taint_intro_list taint_intro_list = 1;
  if (has_taint_intro_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taint_intro_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* taint_intro_frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .taint_intro_list taint_intro_list = 1;
  if (has_taint_intro_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taint_intro_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int taint_intro_frame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .taint_intro_list taint_intro_list = 1;
    if (has_taint_intro_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taint_intro_list());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taint_intro_frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const taint_intro_frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const taint_intro_frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void taint_intro_frame::MergeFrom(const taint_intro_frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taint_intro_list()) {
      mutable_taint_intro_list()->::taint_intro_list::MergeFrom(from.taint_intro_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void taint_intro_frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taint_intro_frame::CopyFrom(const taint_intro_frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taint_intro_frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_taint_intro_list()) {
    if (!this->taint_intro_list().IsInitialized()) return false;
  }
  return true;
}

void taint_intro_frame::Swap(taint_intro_frame* other) {
  if (other != this) {
    std::swap(taint_intro_list_, other->taint_intro_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata taint_intro_frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = taint_intro_frame_descriptor_;
  metadata.reflection = taint_intro_frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int taint_intro_list::kElemFieldNumber;
#endif  // !_MSC_VER

taint_intro_list::taint_intro_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void taint_intro_list::InitAsDefaultInstance() {
}

taint_intro_list::taint_intro_list(const taint_intro_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void taint_intro_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

taint_intro_list::~taint_intro_list() {
  SharedDtor();
}

void taint_intro_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void taint_intro_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taint_intro_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return taint_intro_list_descriptor_;
}

const taint_intro_list& taint_intro_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taintintroframe_2epiqi_2eproto();  return *default_instance_;
}

taint_intro_list* taint_intro_list::default_instance_ = NULL;

taint_intro_list* taint_intro_list::New() const {
  return new taint_intro_list;
}

void taint_intro_list::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool taint_intro_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .taint_intro elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void taint_intro_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .taint_intro elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* taint_intro_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .taint_intro elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int taint_intro_list::ByteSize() const {
  int total_size = 0;
  
  // repeated .taint_intro elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taint_intro_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const taint_intro_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const taint_intro_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void taint_intro_list::MergeFrom(const taint_intro_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void taint_intro_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taint_intro_list::CopyFrom(const taint_intro_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taint_intro_list::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void taint_intro_list::Swap(taint_intro_list* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata taint_intro_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = taint_intro_list_descriptor_;
  metadata.reflection = taint_intro_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int taint_intro::kAddrFieldNumber;
const int taint_intro::kTaintIdFieldNumber;
#endif  // !_MSC_VER

taint_intro::taint_intro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void taint_intro::InitAsDefaultInstance() {
}

taint_intro::taint_intro(const taint_intro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void taint_intro::SharedCtor() {
  _cached_size_ = 0;
  addr_ = GOOGLE_ULONGLONG(0);
  taint_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

taint_intro::~taint_intro() {
  SharedDtor();
}

void taint_intro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void taint_intro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taint_intro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return taint_intro_descriptor_;
}

const taint_intro& taint_intro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taintintroframe_2epiqi_2eproto();  return *default_instance_;
}

taint_intro* taint_intro::default_instance_ = NULL;

taint_intro* taint_intro::New() const {
  return new taint_intro;
}

void taint_intro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addr_ = GOOGLE_ULONGLONG(0);
    taint_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool taint_intro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_taint_id;
        break;
      }
      
      // required uint64 taint_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taint_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &taint_id_)));
          set_has_taint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void taint_intro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->addr(), output);
  }
  
  // required uint64 taint_id = 2;
  if (has_taint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->taint_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* taint_intro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 addr = 1;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->addr(), target);
  }
  
  // required uint64 taint_id = 2;
  if (has_taint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->taint_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int taint_intro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->addr());
    }
    
    // required uint64 taint_id = 2;
    if (has_taint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->taint_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taint_intro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const taint_intro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const taint_intro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void taint_intro::MergeFrom(const taint_intro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_taint_id()) {
      set_taint_id(from.taint_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void taint_intro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taint_intro::CopyFrom(const taint_intro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taint_intro::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void taint_intro::Swap(taint_intro* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(taint_id_, other->taint_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata taint_intro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = taint_intro_descriptor_;
  metadata.reflection = taint_intro_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
